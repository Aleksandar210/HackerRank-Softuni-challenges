using System.Linq;
using SoftuniDataBaseLabEntityFrameWorkCore.Models;
using System;
using System.Text;

namespace SoftuniDataBaseLabEntityFrameWorkCore
{
    class Program
    {
        static void Main(string[] args)
        {
           using var dbContext = new SoftuniContext();
            //Console.WriteLine(GetEmployeeFullNames(dbContext));
            //Console.WriteLine(EmployeesWithSalaryOver5000(dbContext));
            //Console.WriteLine(EmployeesFromResearchAndDevelopment(dbContext));
            //AddNewAddressToEmployee(dbContext);
            //Console.WriteLine(AddNewAddressToEmployee(dbContext));



        }

        //Getting Employee's three names and job title
        public static string GetEmployeeFullNames(SoftuniContext context)
        {
           StringBuilder sb = new StringBuilder();

           var employees =  context.Employees.OrderBy(employee => employee.EmployeeId)
                .Select(employee => new
                {
                    FirstName = employee.FirstName,
                    MiddleName = employee.MiddleName,
                    LastName = employee.LastName,
                    JobTitle = employee.JobTitle,
                    EmployeeSalary = employee.Salary
                }
                ).ToArray();

            foreach(var employee in employees)
            {
                sb.Append("Name: " + employee.FirstName + " " + employee.MiddleName + " " + employee.LastName
                    + " Job title: " + employee.JobTitle
                    +" Salary: "+ String.Format("{0:0.00}", employee.EmployeeSalary)
                + Environment.NewLine);
            }

            return sb.ToString();
        }

        //returns string with employees with salary over 50000
        public static string EmployeesWithSalaryOver5000(SoftuniContext dbContext)
        {
            StringBuilder sb = new StringBuilder();

            var employeesWithOver50000Salary = dbContext.Employees.Where(employee => employee.Salary > 50000)
                .OrderBy(employee => employee.FirstName)
                .Select(employee => new
                {
                    Name = employee.FirstName,
                    Salary = employee.Salary
                }
                ).ToArray();

            foreach(var item in employeesWithOver50000Salary)
            {
                sb.Append(item.Name + " -> " + String.Format("{0:0.00}",item.Salary)+Environment.NewLine);
            }

            return sb.ToString();
        }

        //Getting all employees from research and development department
        public static string EmployeesFromResearchAndDevelopment(SoftuniContext dbContext)
        {
            //finding the departmentID of Research and Development
            int researchAndDevelopemntID = dbContext.Departments.Where(department => department.Name.Equals("Research and Development"))
                .FirstOrDefault().DepartmentId;

            //getting the employees
            var employeesFromResearchAndDevelopment = dbContext.Employees.Where(employee => employee.DepartmentId == researchAndDevelopemntID)
                .OrderBy(employee => employee.Salary)
                .ThenByDescending(employee => employee.FirstName)
                .Select(employee => new
                {
                    FirstNameOfEmployee = employee.FirstName,
                    MiddleNameOfEmployee = employee.MiddleName,
                    LastNameOfRmployee = employee.LastName,
                    DepartmentName = "Research and Development",
                    SalaryOfEmployee = employee.Salary
                }
                ).ToArray();

            StringBuilder sb = new StringBuilder();

            //appendint the employees data into the stringbuilder
            foreach(var employee in employeesFromResearchAndDevelopment)
            {
                sb.Append("Name: " + employee.FirstNameOfEmployee + " " + employee.MiddleNameOfEmployee + " " + employee.LastNameOfRmployee
                    + " Department Name: " + employee.DepartmentName +
                    " Salary: " + String.Format("{0:0.00}", employee.SalaryOfEmployee)
                    + Environment.NewLine);
            }

            return sb.ToString();
        }

        //Assigning new address and getting the first 10 employees and their addresses
        public static string AddNewAddressToEmployee(SoftuniContext dbContext)
        {
            int townID = 4;
            string addressToAdd = "Vitoshka 15";

            //adding the address to table Addresses
            dbContext.Addresses.Add(new Address() { AddressText = addressToAdd, TownId = townID });
            dbContext.SaveChanges();

            //getting the address's id we just added
            int? addressID = dbContext.Addresses
                .FirstOrDefault(address => address.AddressText.Equals(addressToAdd) && address.TownId == townID).AddressId;

            //get Employee with last name Nakov
            var employeeWithLastNameNakov = dbContext.Employees.FirstOrDefault(employee => employee.LastName.Equals("Nakov"));

            employeeWithLastNameNakov.AddressId = addressID;
            dbContext.SaveChanges();

            StringBuilder sb = new StringBuilder();

            var employeesAddressesFirst10 = dbContext.Employees.OrderByDescending(employee => employee.AddressId)
                .Take(10).Select(employee=>new
                {
                    Text = employee.Address.AddressText
                }
                ).ToArray();

            foreach(var employee in employeesAddressesFirst10)
            {
                sb.Append(employee.Text + Environment.NewLine);
            }

            return sb.ToString();
        }
    }
}
